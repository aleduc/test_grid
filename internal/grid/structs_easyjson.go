// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package grid

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeTestGridInternalGrid(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]struct {
							From      string `json:"from"`
							To        string `json:"to"`
							Intensity struct {
								Forecast int       `json:"forecast"`
								Actual   int       `json:"actual"`
								Index    Intensity `json:"index"`
							} `json:"intensity"`
						}, 0, 1)
					} else {
						out.Data = []struct {
							From      string `json:"from"`
							To        string `json:"to"`
							Intensity struct {
								Forecast int       `json:"forecast"`
								Actual   int       `json:"actual"`
								Index    Intensity `json:"index"`
							} `json:"intensity"`
						}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						From      string `json:"from"`
						To        string `json:"to"`
						Intensity struct {
							Forecast int       `json:"forecast"`
							Actual   int       `json:"actual"`
							Index    Intensity `json:"index"`
						} `json:"intensity"`
					}
					easyjson6a975c40Decode(in, &v1)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeTestGridInternalGrid(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson6a975c40Encode(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeTestGridInternalGrid(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeTestGridInternalGrid(l, v)
}
func easyjson6a975c40Decode(in *jlexer.Lexer, out *struct {
	From      string `json:"from"`
	To        string `json:"to"`
	Intensity struct {
		Forecast int       `json:"forecast"`
		Actual   int       `json:"actual"`
		Index    Intensity `json:"index"`
	} `json:"intensity"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			out.From = string(in.String())
		case "to":
			out.To = string(in.String())
		case "intensity":
			easyjson6a975c40Decode1(in, &out.Intensity)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode(out *jwriter.Writer, in struct {
	From      string `json:"from"`
	To        string `json:"to"`
	Intensity struct {
		Forecast int       `json:"forecast"`
		Actual   int       `json:"actual"`
		Index    Intensity `json:"index"`
	} `json:"intensity"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix[1:])
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"intensity\":"
		out.RawString(prefix)
		easyjson6a975c40Encode1(out, in.Intensity)
	}
	out.RawByte('}')
}
func easyjson6a975c40Decode1(in *jlexer.Lexer, out *struct {
	Forecast int       `json:"forecast"`
	Actual   int       `json:"actual"`
	Index    Intensity `json:"index"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "forecast":
			out.Forecast = int(in.Int())
		case "actual":
			out.Actual = int(in.Int())
		case "index":
			out.Index = Intensity(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode1(out *jwriter.Writer, in struct {
	Forecast int       `json:"forecast"`
	Actual   int       `json:"actual"`
	Index    Intensity `json:"index"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"forecast\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Forecast))
	}
	{
		const prefix string = ",\"actual\":"
		out.RawString(prefix)
		out.Int(int(in.Actual))
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.String(string(in.Index))
	}
	out.RawByte('}')
}
